
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMA COMP_DISTINTO COMP_IGUAL COMP_MAYOR COMP_MAYOR_IGUAL COMP_MENOR COMP_MENOR_IGUAL CONDICION_TERNARIA CTE_NUMERICA CTE_REAL CTE_STRING DOS_PUNTOS ID LLAVE_ABRE LLAVE_CIERRA OP_AND OP_ASIGNACION OP_CONCAT OP_DIVISION OP_MULTIPLICACION OP_NOT OP_OR OP_RESTA OP_SUMA PARENTESIS_ABRE PARENTESIS_CIERRA PUNTO_COMA between bool else false if in int out real string true var while program : variables_block statements  program : statements  variables_block : var LLAVE_ABRE variables_list LLAVE_CIERRA  variables_list : variables_list variable_declaration  variables_list : variable_declaration  variable_declaration : variable_type variables_names PUNTO_COMA  variables_names : variables_names COMA ID  variables_names : ID  variable_type : int  variable_type : real  variable_type : string  variable_type : bool  statements : statement  statements : statements statement  statement : assignment_statement  statement : select_statement  statement : while_statement  statement : in_statement  statement : out_statement  while_statement : while logical_statement LLAVE_ABRE statements LLAVE_CIERRA  select_statement : if_statement else_if_statement  select_statement : if_statement  if_statement :  if logical_statement LLAVE_ABRE statements LLAVE_CIERRA  else_if_statement : else if_statement  else_if_statement : else_if_statement else if_statement  else_if_statement : else_if_statement else_statement  else_statement : else LLAVE_ABRE statements LLAVE_CIERRA  out_statement : out str_expression PUNTO_COMA  in_statement : in ID PUNTO_COMA  expression : expression OP_SUMA term  expression : expression OP_RESTA term  expression : OP_RESTA term  expression : term  term : term OP_MULTIPLICACION factor  term : term OP_DIVISION factor  term : factor  factor : CTE_NUMERICA  factor : CTE_REAL  factor : ID  factor : PARENTESIS_ABRE expression PARENTESIS_CIERRA  str_expression : str_term OP_CONCAT str_term  str_expression : str_term  str_term : CTE_STRING  str_term : ID  comparision : expression op_comparision expression  comparision : str_expression op_comparision str_expression  op_comparision : COMP_MENOR  op_comparision : COMP_MAYOR  op_comparision : COMP_MENOR_IGUAL  op_comparision : COMP_MAYOR_IGUAL  op_comparision : COMP_IGUAL  op_comparision : COMP_DISTINTO  logical_statement : logical_expression  logical_statement : logical_expression op_logic logical_expression  logical_expression : OP_NOT logical_term  logical_expression : logical_term  logical_term : comparision  logical_term : between_statement  logical_term : cte_logic  op_logic : OP_OR  op_logic : OP_AND  cte_logic : true  cte_logic : false  between_statement : between PARENTESIS_ABRE ID COMA expression DOS_PUNTOS expression PARENTESIS_CIERRA  assignment_statement : ID OP_ASIGNACION assignment_value PUNTO_COMA  assignment_value : ternary  assignment_value : expression  assignment_value : str_expression  assignment_value : logical_statement  ternary : logical_statement CONDICION_TERNARIA expression DOS_PUNTOS expression  ternary : logical_statement CONDICION_TERNARIA str_expression DOS_PUNTOS str_expression '
    
_lr_action_items = {'var':([0,],[4,]),'ID':([0,2,3,5,6,7,8,9,10,12,13,14,15,16,17,18,20,21,25,33,38,50,51,52,53,54,61,62,63,64,65,66,68,69,70,71,72,73,74,75,76,77,78,81,82,84,85,86,87,88,92,93,94,95,96,107,109,112,113,114,115,117,118,119,123,],[11,11,11,-13,-15,-16,-17,-18,-19,-22,34,44,46,34,11,-14,34,-21,34,80,80,91,-9,-10,-11,-12,-26,-24,11,34,-60,-61,80,80,80,-47,-48,-49,-50,-51,-52,46,102,80,80,46,-29,-28,11,-3,-65,34,-25,11,11,11,116,11,-20,80,-23,80,46,-27,80,]),'while':([0,2,3,5,6,7,8,9,10,12,17,18,21,61,62,63,85,86,87,88,92,94,95,96,107,112,113,115,119,],[13,13,13,-13,-15,-16,-17,-18,-19,-22,13,-14,-21,-26,-24,13,-29,-28,13,-3,-65,-25,13,13,13,13,-20,-23,-27,]),'in':([0,2,3,5,6,7,8,9,10,12,17,18,21,61,62,63,85,86,87,88,92,94,95,96,107,112,113,115,119,],[14,14,14,-13,-15,-16,-17,-18,-19,-22,14,-14,-21,-26,-24,14,-29,-28,14,-3,-65,-25,14,14,14,14,-20,-23,-27,]),'out':([0,2,3,5,6,7,8,9,10,12,17,18,21,61,62,63,85,86,87,88,92,94,95,96,107,112,113,115,119,],[15,15,15,-13,-15,-16,-17,-18,-19,-22,15,-14,-21,-26,-24,15,-29,-28,15,-3,-65,-25,15,15,15,15,-20,-23,-27,]),'if':([0,2,3,5,6,7,8,9,10,12,17,18,21,22,60,61,62,63,85,86,87,88,92,94,95,96,107,112,113,115,119,],[16,16,16,-13,-15,-16,-17,-18,-19,-22,16,-14,-21,16,16,-26,-24,16,-29,-28,16,-3,-65,-25,16,16,16,16,-20,-23,-27,]),'$end':([1,3,5,6,7,8,9,10,12,17,18,21,61,62,85,86,92,94,113,115,119,],[0,-2,-13,-15,-16,-17,-18,-19,-22,-1,-14,-21,-26,-24,-29,-28,-65,-25,-20,-23,-27,]),'LLAVE_ABRE':([4,23,24,26,27,28,29,35,36,37,39,40,41,42,43,46,47,60,67,80,83,97,98,99,100,101,103,104,105,106,125,],[19,63,-53,-56,-57,-58,-59,-62,-63,-33,-42,-36,-43,-37,-38,-44,87,95,-55,-39,-32,-54,-45,-30,-31,-46,-40,-34,-35,-41,-64,]),'LLAVE_CIERRA':([5,6,7,8,9,10,12,18,21,48,49,61,62,85,86,89,92,94,96,107,108,112,113,115,119,],[-13,-15,-16,-17,-18,-19,-22,-14,-21,88,-5,-26,-24,-29,-28,-4,-65,-25,113,115,-6,119,-20,-23,-27,]),'OP_ASIGNACION':([11,],[20,]),'else':([12,21,61,62,94,115,119,],[22,60,-26,-24,-25,-23,-27,]),'OP_NOT':([13,16,20,64,65,66,],[25,25,25,25,-60,-61,]),'between':([13,16,20,25,64,65,66,],[32,32,32,32,32,-60,-61,]),'true':([13,16,20,25,64,65,66,],[35,35,35,35,35,-60,-61,]),'false':([13,16,20,25,64,65,66,],[36,36,36,36,36,-60,-61,]),'OP_RESTA':([13,16,20,25,30,33,34,37,40,42,43,57,64,65,66,68,71,72,73,74,75,76,79,80,83,93,98,99,100,103,104,105,110,114,117,120,121,123,124,],[38,38,38,38,70,38,-39,-33,-36,-37,-38,70,38,-60,-61,38,-47,-48,-49,-50,-51,-52,70,-39,-32,38,70,-30,-31,-40,-34,-35,70,38,38,70,70,38,70,]),'CTE_STRING':([13,15,16,20,25,64,65,66,71,72,73,74,75,76,77,84,93,118,],[41,41,41,41,41,41,-60,-61,-47,-48,-49,-50,-51,-52,41,41,41,41,]),'CTE_NUMERICA':([13,16,20,25,33,38,64,65,66,68,69,70,71,72,73,74,75,76,81,82,93,114,117,123,],[42,42,42,42,42,42,42,-60,-61,42,42,42,-47,-48,-49,-50,-51,-52,42,42,42,42,42,42,]),'CTE_REAL':([13,16,20,25,33,38,64,65,66,68,69,70,71,72,73,74,75,76,81,82,93,114,117,123,],[43,43,43,43,43,43,43,-60,-61,43,43,43,-47,-48,-49,-50,-51,-52,43,43,43,43,43,43,]),'PARENTESIS_ABRE':([13,16,20,25,32,33,38,64,65,66,68,69,70,71,72,73,74,75,76,81,82,93,114,117,123,],[33,33,33,33,78,33,33,33,-60,-61,33,33,33,-47,-48,-49,-50,-51,-52,33,33,33,33,33,33,]),'int':([19,48,49,89,108,],[51,51,-5,-4,-6,]),'real':([19,48,49,89,108,],[52,52,-5,-4,-6,]),'string':([19,48,49,89,108,],[53,53,-5,-4,-6,]),'bool':([19,48,49,89,108,],[54,54,-5,-4,-6,]),'CONDICION_TERNARIA':([24,26,27,28,29,35,36,37,39,40,41,42,43,46,59,67,80,83,97,98,99,100,101,103,104,105,106,125,],[-53,-56,-57,-58,-59,-62,-63,-33,-42,-36,-43,-37,-38,-44,93,-55,-39,-32,-54,-45,-30,-31,-46,-40,-34,-35,-41,-64,]),'PUNTO_COMA':([24,26,27,28,29,34,35,36,37,39,40,41,42,43,44,45,46,55,56,57,58,59,67,80,83,90,91,97,98,99,100,101,103,104,105,106,116,121,122,125,],[-53,-56,-57,-58,-59,-39,-62,-63,-33,-42,-36,-43,-37,-38,85,86,-44,92,-66,-67,-68,-69,-55,-39,-32,108,-8,-54,-45,-30,-31,-46,-40,-34,-35,-41,-7,-70,-71,-64,]),'OP_OR':([24,26,27,28,29,35,36,37,39,40,41,42,43,46,67,80,83,98,99,100,101,103,104,105,106,125,],[65,-56,-57,-58,-59,-62,-63,-33,-42,-36,-43,-37,-38,-44,-55,-39,-32,-45,-30,-31,-46,-40,-34,-35,-41,-64,]),'OP_AND':([24,26,27,28,29,35,36,37,39,40,41,42,43,46,67,80,83,98,99,100,101,103,104,105,106,125,],[66,-56,-57,-58,-59,-62,-63,-33,-42,-36,-43,-37,-38,-44,-55,-39,-32,-45,-30,-31,-46,-40,-34,-35,-41,-64,]),'OP_SUMA':([30,34,37,40,42,43,57,79,80,83,98,99,100,103,104,105,110,120,121,124,],[69,-39,-33,-36,-37,-38,69,69,-39,-32,69,-30,-31,-40,-34,-35,69,69,69,69,]),'COMP_MENOR':([30,31,34,37,39,40,41,42,43,46,57,58,80,83,99,100,103,104,105,106,],[71,71,-39,-33,-42,-36,-43,-37,-38,-44,71,71,-39,-32,-30,-31,-40,-34,-35,-41,]),'COMP_MAYOR':([30,31,34,37,39,40,41,42,43,46,57,58,80,83,99,100,103,104,105,106,],[72,72,-39,-33,-42,-36,-43,-37,-38,-44,72,72,-39,-32,-30,-31,-40,-34,-35,-41,]),'COMP_MENOR_IGUAL':([30,31,34,37,39,40,41,42,43,46,57,58,80,83,99,100,103,104,105,106,],[73,73,-39,-33,-42,-36,-43,-37,-38,-44,73,73,-39,-32,-30,-31,-40,-34,-35,-41,]),'COMP_MAYOR_IGUAL':([30,31,34,37,39,40,41,42,43,46,57,58,80,83,99,100,103,104,105,106,],[74,74,-39,-33,-42,-36,-43,-37,-38,-44,74,74,-39,-32,-30,-31,-40,-34,-35,-41,]),'COMP_IGUAL':([30,31,34,37,39,40,41,42,43,46,57,58,80,83,99,100,103,104,105,106,],[75,75,-39,-33,-42,-36,-43,-37,-38,-44,75,75,-39,-32,-30,-31,-40,-34,-35,-41,]),'COMP_DISTINTO':([30,31,34,37,39,40,41,42,43,46,57,58,80,83,99,100,103,104,105,106,],[76,76,-39,-33,-42,-36,-43,-37,-38,-44,76,76,-39,-32,-30,-31,-40,-34,-35,-41,]),'OP_CONCAT':([34,39,41,46,],[-44,84,-43,-44,]),'DOS_PUNTOS':([34,37,39,40,41,42,43,46,80,83,99,100,103,104,105,106,110,111,120,],[-39,-33,-42,-36,-43,-37,-38,-44,-39,-32,-30,-31,-40,-34,-35,-41,117,118,123,]),'OP_MULTIPLICACION':([34,37,40,42,43,80,83,99,100,103,104,105,],[-39,81,-36,-37,-38,-39,81,81,81,-40,-34,-35,]),'OP_DIVISION':([34,37,40,42,43,80,83,99,100,103,104,105,],[-39,82,-36,-37,-38,-39,82,82,82,-40,-34,-35,]),'PARENTESIS_CIERRA':([37,40,42,43,79,80,83,99,100,103,104,105,124,],[-33,-36,-37,-38,103,-39,-32,-30,-31,-40,-34,-35,125,]),'COMA':([90,91,102,116,],[109,-8,114,-7,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'variables_block':([0,],[2,]),'statements':([0,2,63,87,95,],[3,17,96,107,112,]),'statement':([0,2,3,17,63,87,95,96,107,112,],[5,5,18,18,5,5,5,18,18,18,]),'assignment_statement':([0,2,3,17,63,87,95,96,107,112,],[6,6,6,6,6,6,6,6,6,6,]),'select_statement':([0,2,3,17,63,87,95,96,107,112,],[7,7,7,7,7,7,7,7,7,7,]),'while_statement':([0,2,3,17,63,87,95,96,107,112,],[8,8,8,8,8,8,8,8,8,8,]),'in_statement':([0,2,3,17,63,87,95,96,107,112,],[9,9,9,9,9,9,9,9,9,9,]),'out_statement':([0,2,3,17,63,87,95,96,107,112,],[10,10,10,10,10,10,10,10,10,10,]),'if_statement':([0,2,3,17,22,60,63,87,95,96,107,112,],[12,12,12,12,62,94,12,12,12,12,12,12,]),'else_if_statement':([12,],[21,]),'logical_statement':([13,16,20,],[23,47,59,]),'logical_expression':([13,16,20,64,],[24,24,24,97,]),'logical_term':([13,16,20,25,64,],[26,26,26,67,26,]),'comparision':([13,16,20,25,64,],[27,27,27,27,27,]),'between_statement':([13,16,20,25,64,],[28,28,28,28,28,]),'cte_logic':([13,16,20,25,64,],[29,29,29,29,29,]),'expression':([13,16,20,25,33,64,68,93,114,117,123,],[30,30,57,30,79,30,98,110,120,121,124,]),'str_expression':([13,15,16,20,25,64,77,93,118,],[31,45,31,58,31,31,101,111,122,]),'term':([13,16,20,25,33,38,64,68,69,70,93,114,117,123,],[37,37,37,37,37,83,37,37,99,100,37,37,37,37,]),'str_term':([13,15,16,20,25,64,77,84,93,118,],[39,39,39,39,39,39,39,106,39,39,]),'factor':([13,16,20,25,33,38,64,68,69,70,81,82,93,114,117,123,],[40,40,40,40,40,40,40,40,40,40,104,105,40,40,40,40,]),'variables_list':([19,],[48,]),'variable_declaration':([19,48,],[49,89,]),'variable_type':([19,48,],[50,50,]),'assignment_value':([20,],[55,]),'ternary':([20,],[56,]),'else_statement':([21,],[61,]),'op_logic':([24,],[64,]),'op_comparision':([30,31,57,58,],[68,77,68,77,]),'variables_names':([50,],[90,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> variables_block statements','program',2,'p_program_with_variables','sintactico.py',21),
  ('program -> statements','program',1,'p_program','sintactico.py',28),
  ('variables_block -> var LLAVE_ABRE variables_list LLAVE_CIERRA','variables_block',4,'p_variables_block','sintactico.py',37),
  ('variables_list -> variables_list variable_declaration','variables_list',2,'p_variables_list_r','sintactico.py',43),
  ('variables_list -> variable_declaration','variables_list',1,'p_variables_list','sintactico.py',49),
  ('variable_declaration -> variable_type variables_names PUNTO_COMA','variable_declaration',3,'p_variable_declaration','sintactico.py',55),
  ('variables_names -> variables_names COMA ID','variables_names',3,'p_variables_names_r','sintactico.py',61),
  ('variables_names -> ID','variables_names',1,'p_variables_names','sintactico.py',67),
  ('variable_type -> int','variable_type',1,'p_variable_type_int','sintactico.py',74),
  ('variable_type -> real','variable_type',1,'p_variable_type_real','sintactico.py',80),
  ('variable_type -> string','variable_type',1,'p_variable_type_string','sintactico.py',86),
  ('variable_type -> bool','variable_type',1,'p_variable_type_bool','sintactico.py',92),
  ('statements -> statement','statements',1,'p_statements','sintactico.py',100),
  ('statements -> statements statement','statements',2,'p_statements_r','sintactico.py',107),
  ('statement -> assignment_statement','statement',1,'p_statement_assignment','sintactico.py',114),
  ('statement -> select_statement','statement',1,'p_statement_select','sintactico.py',121),
  ('statement -> while_statement','statement',1,'p_statement_while','sintactico.py',128),
  ('statement -> in_statement','statement',1,'p_statement_in','sintactico.py',135),
  ('statement -> out_statement','statement',1,'p_statement_out','sintactico.py',142),
  ('while_statement -> while logical_statement LLAVE_ABRE statements LLAVE_CIERRA','while_statement',5,'p_while_statement','sintactico.py',150),
  ('select_statement -> if_statement else_if_statement','select_statement',2,'p_select_statement_with_else','sintactico.py',157),
  ('select_statement -> if_statement','select_statement',1,'p_select_statement','sintactico.py',163),
  ('if_statement -> if logical_statement LLAVE_ABRE statements LLAVE_CIERRA','if_statement',5,'p_if_statement','sintactico.py',169),
  ('else_if_statement -> else if_statement','else_if_statement',2,'p_else_if_statement','sintactico.py',175),
  ('else_if_statement -> else_if_statement else if_statement','else_if_statement',3,'p_else_if_statement_r','sintactico.py',181),
  ('else_if_statement -> else_if_statement else_statement','else_if_statement',2,'p_else_if_statement_r_with_else','sintactico.py',187),
  ('else_statement -> else LLAVE_ABRE statements LLAVE_CIERRA','else_statement',4,'p_else_statement','sintactico.py',193),
  ('out_statement -> out str_expression PUNTO_COMA','out_statement',3,'p_out_statement','sintactico.py',200),
  ('in_statement -> in ID PUNTO_COMA','in_statement',3,'p_in_statement','sintactico.py',208),
  ('expression -> expression OP_SUMA term','expression',3,'p_expression_plus','sintactico.py',218),
  ('expression -> expression OP_RESTA term','expression',3,'p_expression_minus','sintactico.py',225),
  ('expression -> OP_RESTA term','expression',2,'p_expression_negative','sintactico.py',232),
  ('expression -> term','expression',1,'p_expression','sintactico.py',239),
  ('term -> term OP_MULTIPLICACION factor','term',3,'p_term_multp','sintactico.py',247),
  ('term -> term OP_DIVISION factor','term',3,'p_term_div','sintactico.py',254),
  ('term -> factor','term',1,'p_term','sintactico.py',261),
  ('factor -> CTE_NUMERICA','factor',1,'p_factor_num','sintactico.py',269),
  ('factor -> CTE_REAL','factor',1,'p_factor_real','sintactico.py',276),
  ('factor -> ID','factor',1,'p_factor_id','sintactico.py',283),
  ('factor -> PARENTESIS_ABRE expression PARENTESIS_CIERRA','factor',3,'p_factor_expression','sintactico.py',290),
  ('str_expression -> str_term OP_CONCAT str_term','str_expression',3,'p_str_expression_concat','sintactico.py',298),
  ('str_expression -> str_term','str_expression',1,'p_str_expression','sintactico.py',304),
  ('str_term -> CTE_STRING','str_term',1,'p_str_term_cte','sintactico.py',310),
  ('str_term -> ID','str_term',1,'p_str_term_id','sintactico.py',317),
  ('comparision -> expression op_comparision expression','comparision',3,'p_comparision','sintactico.py',326),
  ('comparision -> str_expression op_comparision str_expression','comparision',3,'p_comparision_str','sintactico.py',332),
  ('op_comparision -> COMP_MENOR','op_comparision',1,'p_op_comparision_minor','sintactico.py',339),
  ('op_comparision -> COMP_MAYOR','op_comparision',1,'p_op_comparision_major','sintactico.py',345),
  ('op_comparision -> COMP_MENOR_IGUAL','op_comparision',1,'p_op_comparision_minor_eq','sintactico.py',351),
  ('op_comparision -> COMP_MAYOR_IGUAL','op_comparision',1,'p_op_comparision_major_eq','sintactico.py',357),
  ('op_comparision -> COMP_IGUAL','op_comparision',1,'p_op_comparision_equal','sintactico.py',363),
  ('op_comparision -> COMP_DISTINTO','op_comparision',1,'p_op_comparision_distinct','sintactico.py',369),
  ('logical_statement -> logical_expression','logical_statement',1,'p_logical_statement','sintactico.py',378),
  ('logical_statement -> logical_expression op_logic logical_expression','logical_statement',3,'p_logical_statement_with_operators','sintactico.py',384),
  ('logical_expression -> OP_NOT logical_term','logical_expression',2,'p_logical_expression_not','sintactico.py',391),
  ('logical_expression -> logical_term','logical_expression',1,'p_logical_expression','sintactico.py',397),
  ('logical_term -> comparision','logical_term',1,'p_logical_term_comparision','sintactico.py',404),
  ('logical_term -> between_statement','logical_term',1,'p_logical_term_between','sintactico.py',410),
  ('logical_term -> cte_logic','logical_term',1,'p_logical_term_cte','sintactico.py',416),
  ('op_logic -> OP_OR','op_logic',1,'p_op_logic_or','sintactico.py',423),
  ('op_logic -> OP_AND','op_logic',1,'p_op_logic_and','sintactico.py',429),
  ('cte_logic -> true','cte_logic',1,'p_cte_logic_true','sintactico.py',436),
  ('cte_logic -> false','cte_logic',1,'p_cte_logic_false','sintactico.py',442),
  ('between_statement -> between PARENTESIS_ABRE ID COMA expression DOS_PUNTOS expression PARENTESIS_CIERRA','between_statement',8,'p_between_statement','sintactico.py',449),
  ('assignment_statement -> ID OP_ASIGNACION assignment_value PUNTO_COMA','assignment_statement',4,'p_assignment_statement','sintactico.py',457),
  ('assignment_value -> ternary','assignment_value',1,'p_assignment_value_ternary','sintactico.py',463),
  ('assignment_value -> expression','assignment_value',1,'p_assignment_value_expression','sintactico.py',469),
  ('assignment_value -> str_expression','assignment_value',1,'p_assignment_value_str','sintactico.py',475),
  ('assignment_value -> logical_statement','assignment_value',1,'p_assignment_value_logical','sintactico.py',481),
  ('ternary -> logical_statement CONDICION_TERNARIA expression DOS_PUNTOS expression','ternary',5,'p_ternary_num','sintactico.py',488),
  ('ternary -> logical_statement CONDICION_TERNARIA str_expression DOS_PUNTOS str_expression','ternary',5,'p_ternary_str','sintactico.py',494),
]
