# -1 --> Estado Final
# -2 --> No hay Estado Eiguiente [ERROR]
# Matriz de 24x34
token_table =  [
    [-2,   -2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-1],
    [-2,	-2,	256,	256,	256,	256,	256,	256,	256,	256,	256,	256,	256,	256,	256,	256,	256,	256,	256,	256,	256,	256,	256,	256],
    [257,	-2,	257,	257,	257,	257,	257,	 -2,	257,	257,	257,	257,	257,	257,	257,	257,	257,	257,	257,	257,	257,	257,	257,	257],
    [258,	-2,	258,	258,	258,	258,	258,	258,	258,	258,	258,	258,	258,	258,	258,	258,	258,	258,	258,	258,	258,	258,	258,	258],
    [-2,	    -2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2],
    [259,	259,	259,	259,	259,	259,	259,	259,	259,	259,	259,	259,	259,	259,	259,	259,	259,	259,	259,	259,	259,	259,	259,	259],
    [278,	278,	278,	278,	278,	278,	278,	278,	278,	278,	278,	278,	278,	7,	278,	278,	278,	278,	278,	278,	278,	278,	278,	278],
    [-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2],
    [-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2],
    [270,	270,	270,	270,	270,	270,	270,	270,	270,	270,	270,	270,	270,	270,	270,	270,	270,	270,	270,	270,	270,	270,	270,	270],
    [271,	271,	271,	271,	271,	271,	271,	271,	271,	271,	271,	271,	271,	271,	271,	271,	271,	271,	271,	271,	271,	271,	271,	271],
    [272,	272,	272,	272,	272,	272,	272,	272,	272,	272,	272,	272,	272,	272,	272,	272,	272,	272,	272,	272,	272,	272,	272,	272],
    [273,	273,	273,	273,	273,	273,	273,	273,	273,	273,	273,	273,	273,	273,	273,	273,	273,	273,	273,	273,	273,	273,	273,	273],
    [277,	277,	277,	277,	277,	277,	277,	277,	277,	277,	277,	 -2,	277,	277,	277,	277,	277,	277,	277,	277,	277,	277,	277,	277],
    [280,	280,	280,	280,	280,	280,	280,	280,	280,	280,	280,	280,	280,	280,	280,	280,	280,	280,	280,	280,	280,	280,	280,	280],
    [276,	276,	276,	276,	276,	276,	276,	276,	276,	276,	276,	276,	276,	276,	276,	276,	276,	276,	276,	276,	276,	276,	276,	276],
    [279,	279,	279,	279,	279,	279,	279,	279,	279,	279,	279,	279,	279,	279,	279,	279,	279,	279,	279,	279,	279,	279,	279,	279],
    [281,	281,	281,	281,	281,	281,	281,	281,	281,	281,	281,	281,	281,	281,	281,	281,	281,	281,	281,	 -2,	281,	281,	281,	281],
    [283,	283,	283,	283,	283,	283,	283,	283,	283,	283,	283,	283,	283,	283,	283,	283,	283,	283,	283,	283,	283,	283,	283,	283],
    [282,	282,	282,	282,	282,	282,	282,	282,	282,	282,	282,	282,	282,	282,	282,	282,	282,	282,	282,	 -2,	282,	282,	282,	282],
    [284,	284,	284,	284,	284,	284,	284,	284,	284,	284,	284,	284,	284,	284,	284,	284,	284,	284,	284,	284,	284,	284,	284,	284],
    [289,	289,	289,	289,	289,	289,	289,	289,	289,	289,	289,	289,	289,	289,	289,	289,	289,	289,	289,	 -2,	289,	289,	289,	289],
    [286,	286,	286,	286,	286,	286,	286,	286,	286,	286,	286,	286,	286,	286,	286,	286,	286,	286,	286,	286,	286,	286,	286,	286],
    [290,	290,	290,	290,	290,	290,	290,	290,	290,	290,	290,	290,	290,	290,	290,	290,	290,	290,	290,	 -2,	290,	290,	290,	290],
    [285,	285,	285,	285,	285,	285,	285,	285,	285,	285,	285,	285,	285,	285,	285,	285,	285,	285,	285,	285,	285,	285,	285,	285],
    [-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2],
    [287,	287,	287,	287,	287,	287,	287,	287,	287,	287,	287,	287,	287,	287,	287,	287,	287,	287,	287,	287,	287,	287,	287,	287],
    [-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2],
    [288,	288,	288,	288,	288,	288,	288,	288,	288,	288,	288,	288,	288,	288,	288,	288,	288,	288,	288,	288,	288,	288,	288,	288],
    [274,	274,	274,	274,	274,	274,	274,	274,	274,	274,	274,	274,	274,	274,	274,	274,	274,	274,	274,	274,	274,	274,	274,	274],
    [275,	275,	275,	275,	275,	275,	275,	275,	275,	275,	275,	275,	275,	275,	275,	275,	275,	275,	275,	275,	275,	275,	275,	275],
    [292,	292,	292,	292,	292,	292,	292,	292,	292,	292,	292,	292,	292,	292,	292,	292,	292,	292,	292,	292,	292,	292,	292,	292],
    [-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2,	-2],
    [291,    291,	291,	291,	291,	291,	291,	291,	291,	291,	291,	291,	291,	291,	291,	291,	291,	291,	291,	291,	291,	291,	291,	291]
]

token_list = {
    256: { "type": "ID", "value": None},
    257: { "type": "CTE_NUMERICA", "value": None},
    258: { "type": "CTE_REAL", "value": None},
    259: { "type": "CTE_STRING", "value": None},
    270: { "type": "LLAVE_ABRE", "value": "{"},
    271: { "type": "LLAVE_CIERRA", "value": "}"},
    272: { "type": "PARENTESIS_ABRE", "value": "("},
    273: { "type": "PARENTESIS_CIERRA", "value": ")"},
    274: { "type": "PUNTO_COMA", "value": ";"},
    275: { "type": "COMA", "value": ","},
    276: { "type": "OP_RESTA", "value": "-"},
    277: { "type": "OP_SUMA", "value": "+"},
    278: { "type": "OP_DIVISION", "value": "/"},
    279: { "type": "OP_MULTIPLICACION", "value": "*"},
    280: { "type": "OP_CONCAT", "value": "++"},
    281: { "type": "COMP_MENOR", "value": "<"},
    282: { "type": "COMP_MAYOR", "value": ">"},
    283: { "type": "COMP_MENOR_IGUAL", "value": "<="},
    284: { "type": "COMP_MAYOR_IGUAL", "value": ">="},
    285: { "type": "COMP_IGUAL", "value": "=="},
    286: { "type": "COMP_DISTINTO", "value": "!="},
    287: { "type": "OP_OR", "value": "||"},
    288: { "type": "OP_AND", "value": "&&"},
    289: { "type": "OP_NOT", "value": "!"},
    290: { "type": "OP_ASIGNACION", "value": "="},
    291: { "type": "CONDICION_TERNARIA", "value": "?"},
    292: { "type": "DOS_PUNTOS", "value": ":"}
}


def get_token_id(last, event):
    return token_table[last][event]

def get_token_label(last, event):
    return token_list[get_token_id(last, event)]